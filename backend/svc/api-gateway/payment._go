// package main

// import (
// 	"encoding/json"
// 	"log"
// 	"net/http"
// 	"time"

// 	"github.com/google/uuid"
// 	"github.com/segmentio/kafka-go"
// )

// func handlePaymentRequest(w http.ResponseWriter, r *http.Request) {
// 	if r.Method != http.MethodPost {
// 		http.Error(w, "Only POST allowed", http.StatusMethodNotAllowed)
// 		return
// 	}

// 	var req PaymentRequest
// 	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
// 		http.Error(w, "Invalid JSON", http.StatusBadRequest)
// 		return
// 	}

// 	paymentID := uuid.NewString()
// 	event := KafkaPaymentEvent{
// 		PaymentID:   paymentID,
// 		Request:     req,
// 		RequestedAt: time.Now(),
// 	}

// 	msgBytes, err := json.Marshal(event)
// 	if err != nil {
// 		http.Error(w, "Error creating message", http.StatusInternalServerError)
// 		return
// 	}

// 	err = kafkaWriter.WriteMessages(r.Context(), kafka.Message{
// 		Key:   []byte(paymentID),
// 		Value: msgBytes,
// 	})
// 	if err != nil {
// 		log.Println("Kafka error:", err)
// 		http.Error(w, "Failed to queue payment", http.StatusInternalServerError)
// 		return
// 	}

// 	w.WriteHeader(http.StatusAccepted)
// 	json.NewEncoder(w).Encode(map[string]string{
// 		"status":     "processing",
// 		"payment_id": paymentID,
// 	})
// }
