services:
  frontend:
    container_name: frontend
    build:
      context: ./web-client
    ports:
      - $FRONTEND_PORT:$FRONTEND_PORT
    volumes:
      - ./web-client:/app
      - /app/node_modules
    environment:
      NODE_ENV: development
      CHOKIDAR_USEPOLLING: true
    command: npm run dev -- --host

  # nginx:
  #   image: nginx:stable-alpine
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #   depends_on:
  #     - api-gateway1
  #     - api-gateway2

  # api-gateway1:
  #   build: ./api-gateway
  #   environment:
  #     - KAFKA_BROKER=kafka:9092

  # api-gateway2:
  #   build: ./api-gateway
  #   environment:
  #     - KAFKA_BROKER=kafka:9092

  api-gateway:
    container_name: gateway
    build:
      context: ./backend
      dockerfile: ./Dockerfile
      args:
        GO_VERSION: $GO_VERSION
        SERVICE_NAME: api-gateway
    environment:
      SERVE_PORT: $GATEWAY_PORT
      AUTH_SERVICE_HOST: http://auth-service:$AUTH_PORT
      ACCOUNT_SERVICE_HOST: http://account-service:$ACCOUNT_PORT
      PAYMENT_SERVICE_HOST: http://payment-service:$ACCOUNT_PORT
      FRONTEND_HOST: localhost:$FRONTEND_PORT
      KAFKA_BROKER: $KAFKA_BROKER
    ports:
      # - 4000:4000
      - 8080:$GATEWAY_PORT

  auth-service:
    container_name: auth-service
    build:
      context: ./backend
      dockerfile: ./Dockerfile
      args:
        GO_VERSION: $GO_VERSION
        SERVICE_NAME: auth-service
    depends_on:
      postgres-init:
        condition: service_completed_successfully
    environment:
      SERVE_PORT: $AUTH_PORT
      FRONTEND_HOST: localhost:$DEFAULT_PORT
      POSTGRES_HOST: $POSTGRES_HOST
    # ports:
    #   - 4000:4000

  account-service:
    container_name: account-service
    build:
      context: ./backend
      dockerfile: ./Dockerfile
      args:
        GO_VERSION: $GO_VERSION
        SERVICE_NAME: account-service
    environment:
      SERVE_PORT: $ACCOUNT_PORT
      KAFKA_BROKER: $KAFKA_BROKER
      POSTGRES_HOST: $POSTGRES_HOST
    ports:
      - 4000:4000

  payment-service:
    container_name: payment-service
    build:
      context: ./backend
      dockerfile: ./Dockerfile
      args:
        GO_VERSION: $GO_VERSION
        SERVICE_NAME: payment-service
    environment:
      SERVE_PORT: $PAYMENT_PORT
      KAFKA_BROKER: $KAFKA_BROKER

  transaction-service:
    container_name: transaction-service
    build:
      context: ./backend
      dockerfile: ./Dockerfile
      args:
        GO_VERSION: $GO_VERSION
        SERVICE_NAME: transaction-service
    environment:
      KAFKA_BROKER: $KAFKA_BROKER
      POSTGRES_HOST: $POSTGRES_HOST

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "29092:$KAFKA_PORT"
    environment:
      KAFKA_BROKER: $KAFKA_BROKER
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:9093
      KAFKA_CFG_LISTENERS: PLAINTEXT://kafka:9092,CONTROLLER://kafka:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_KRAFT_CLUSTER_ID: kraft-cluster-1
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LOG_DIRS: /tmp/kraft-combined-logs
    volumes:
      - ./volumes/kafka_data:/bitnami/kafka
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "kafka:9092", "--list"]
      interval: 3s
      timeout: 3s
      retries: 10

  kafka-init:
    image: bitnami/kafka:latest
    container_name: kafka-init
    depends_on:
      - kafka
    entrypoint: ["/bin/sh", "-c"]
    environment:
      KAFKA_BROKER: $KAFKA_BROKER
    volumes:
      - ./scripts/kafka-init:/init
    command: [ "/init/init.sh"]
    
  postgres:
    image: postgres:17.5
    container_name: postgres
    environment:
      POSTGRES_DB: banking
      POSTGRES_PASSWORD: postgres
    user: postgres
    # volumes:
    #   - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-U", "postgres"]
      interval: 3s
      timeout: 3s
      retries: 10

  postgres-init:
    image: postgres:17.5
    container_name: postgres-init
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./scripts/postgres-init:/init
    environment:
      PGPASSWORD: postgres  # Needed for psql to auth
    entrypoint: ["sh","-c","psql -h postgres -U postgres -f /init/init.sql"]


volumes:
 postgres_data:
  
# cassandra:
#   image: cassandra:4.1
#   ports: ["9042:9042"]
#   healthcheck:
#     test: ["CMD", "cqlsh", "-e", "DESCRIBE KEYSPACES"]
#     interval: 5s
#     retries: 6

# cassandra-init:
#   image: cassandra:4.1
#   depends_on:
#     cassandra:
#       condition: service_healthy
#   entrypoint: ["sh","-c","cqlsh cassandra -f /schema/init.cql"]
#   volumes:
#     - ./db/cassandra-init:/schema



# redis:
#   image: redis:7-alpine
#   ports:
#     - "6379:6379"
#   healthcheck:
#     test: ["CMD", "redis-cli", "ping"]
#     interval: 5s
#     timeout: 3s
#     retries: 3
